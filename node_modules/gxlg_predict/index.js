function predict ( commands, bad, layout = "qwerty" ) {

  if ( ! bad ) return undefined

  var keyboard
  if ( typeof layout === "string" )
    keyboard = require ( "./layouts.json" ) [ layout ]
  else
    keyboard = layout

  if ( ! keyboard ) return undefined

  var pr_v = { }
  commands.forEach ( c => pr_v [ c ] = 0 )

  for ( var l in bad ) {
    var letter = bad [ l ]
    var ly, lx
    for ( var row in keyboard ) {
      if ( keyboard [ row ].includes ( letter )) {
        ly = Number ( row )
        lx = keyboard [ row ].indexOf ( letter )
        break
      }
    }
    if ( ! ( ly || lx )) continue
    var coords = [ -1, 0, 1 ]
    coords.forEach ( y => {
      coords.forEach ( x => {
        try {
          var char = keyboard [ ly + y ] [ lx + x ]
          if ( char ) {
            commands
              .filter ( c => c [ l ] == char )
              .forEach ( c => {
                pr_v [ c ] += ( x || y ) ? 1 : 2
              })
          }
        } catch { }
      })
    })
  }

  var max = 0
  for ( var p in pr_v ) {
    if ( pr_v [ p ] > max ) max = pr_v [ p ]
  }
  if ( ! max ) return undefined
  var predicted = [ ]
  for ( var p in pr_v ) {
    if ( pr_v [ p ] == max ) predicted.push ( p )
  }
  if ( predicted.length == 1 ) return predicted [ 0 ]
  else {
    predicted.forEach ( c => {
      var a = Math.abs ( c.length - bad.length )
      pr_v [ c ] += a <= 1 ? 2 - a : 0
    })
    max = 0
    for ( var p in pr_v ) {
      if ( pr_v [ p ] > max ) max = pr_v [ p ]
    }
    predicted = [ ]
    for ( var p in pr_v ) {
      if ( pr_v [ p ] == max ) predicted.push ( p )
    }
    return predicted.length == 1 ? predicted [ 0 ] : undefined
  }
}

module.exports = predict
